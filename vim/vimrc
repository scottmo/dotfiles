" vim: fdm=marker foldmarker={{{,}}} foldlevel=0

" Settings {{{
    " General {{{
        set nocompatible
        set ff=unix
        set autoread

        set viewoptions=folds,options,cursor,unix,slash " better window/*nix compatibility

        set backspace=indent,eol,start  " Backspace for dummies

        set ttyfast         " faster terminal updates

        set hidden              " Allow buffer switching without saving

        set sessionoptions-=help

        set modeline
        set modelines=5

        " paragraph wrapping
        " set formatoptions+=w
        " set tw=79

        set ttimeoutlen=50 " lower mode switching delay

        " Let Vim use utf-8 internally, because many scripts require this
        set encoding=utf-8
        set fileencodings=utf-8,gbk " add gbk to display Chinese gbk
    " }}}
    " nobackups {{{
        set nobackup
        set nowritebackup
        set noswapfile
    " }}}
    " indent {{{
        set autoindent      " indent automatically
        set shiftwidth=4    " << >> indent width
        set softtabstop=4   " backspace width = 4
        set tabstop=4       " tab width set to 4
        set expandtab       " expand tab into spaces
        " fixes html indenting in vim 7.4
        let g:html_indent_inctags = "html,body,head,tbody"
    " }}}
    " search {{{
        set incsearch       " do incremental searching
        set hlsearch        " highlight search terms
        set ignorecase      " ignore case
        set smartcase       " ignore case if search pattern is all lowercase,
                            "    case-sensitive otherwise
    " }}}
    " wildignore {{{
        set wildignore=*.o,*.pyc,*~,*.class
        set wildignore+=*.jpg,*.png,*.gif,*.pdf,*.tar,*.zip,*.tgz
        set wildignore+=*.tmp
        set wildignore+=.git,.atom,.idea,.settings,.travis
        set wildignore+=node_modules,bower_components,target,project_files,dist
        set wildignore+=.DS_Store
    " }}}
    " UI {{{
        set shortmess+=I    " disable startup text
        " set relativenumber  " use relativenumber for gutter"
        set mouse=a         " Automatically enable mouse usage
        set mousehide       " hide mouse when typing
        set laststatus=2    " always display status line
        set nu              " show number
        set linespace=3     " line spacing in pixel
        set tabpagemax=15   " Only show 15 tabs
        set showmode        " Display the current mode
        set showcmd         " display incomplete commands
        set ruler           " turn on status ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showmatch       " show matching parenthesis
        set virtualedit=onemore " Allow for cursor beyond last character

        set nowrap          " don't wrap text for performance reason

        set scrolljump=5    " Lines to scroll when cursor leaves screen
        set scrolloff=3     " Minimum lines to keep above and below cursor

        set splitbelow      " open split panes to bottom and
        set splitright      " right

        set wildmenu                    " Show list instead of just completing
        set wildmode=list:longest,full  " <Tab> completion, list matches, then longest common part, then all.

        set display+=lastline " no more @'s even when line doesn't fit screen

        set guitablabel=%t    " only display file name on tab title

        set foldnestmax=3

        let g:netrw_liststyle=3 " file tree layout

        set linebreak         " word wrapping
        set showbreak=\ \ "   " add 2 more spaces for indented wrapped lines

        if v:version >= 704
            set breakindent   " keep indent for wrapped lines
        endif

        " set t_Co=256 " use 256 colors
        if has("termguicolors")
            set termguicolors
        endif
    " }}}
    " gvim {{{
        if has("gui_running")
            set guioptions-=m " remove menu bar
            set guioptions-=T " remove toolbar
            set guioptions-=r " remove right scrollbar
            set guioptions-=L " remove left  scrollbar
            set guioptions+=e " use native tab display
        endif
    " }}}
    " paste automatically with paste mode on {{{
        if exists('$TMUX')
            function! WrapForTmux(s)
                let tmux_start = "\<Esc>Ptmux;"
                let tmux_end = "\<Esc>\\"
                return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
            endfunction

            let &t_SI .= WrapForTmux("\<Esc>[?2004h")
            let &t_EI .= WrapForTmux("\<Esc>[?2004l")
        endif

        function! XTermPasteBegin()
            set pastetoggle=<Esc>[201~
            set paste
            return ""
        endfunction

        inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
    " }}}
    " Arrow Key Fix {{{
        " https://github.com/spf13/spf13-vim/issues/780
        if &term[:4] == "xterm" || &term[:5] == 'screen' || &term[:3] == 'rxvt'
            inoremap <silent> <C-[>OC <RIGHT>
        endif
    " }}}
" }}}
" Key Mapping {{{
    " New Bindings {{{
        let g:mapleader = ","
        
        imap jj <Esc>

        " Edit/Reload vimrc
        nmap <silent> <leader>ev :e ~/.vimrc<cr>
        nmap <silent> <leader>sv :so ~/.vimrc<cr>

        " highlight same words under cursor when double click on it
        nmap <2-LeftMouse> *

        " replace word under cursor
        nmap <leader>r :%s/\<<C-r><C-w>\>/
        " display all lines with keyword under cursor and ask which one to jump to
        nmap gr [I:let nr = input("Which one: ")<bar>exe "normal " . nr ."[\t"<cr>

        nmap <silent> <leader>/ :nohlsearch<cr>

        nnoremap th :tabprev<CR>
        nnoremap tl :tabnext<CR>
        nnoremap tn :tabnew<CR>

        noremap <leader>y "*y
        noremap <leader>p "*p

        set pastetoggle=<F12>
    " }}}
    " Command abbrev {{{
        " For when you forget to sudo.. Really Write the file.
        cmap w!! w !sudo tee % >/dev/null
        " change to current working directory
        cmap cwd lcd %:p:h
        cmap pwdf echo @%
    " }}}
    " Default Replacements/Extension/Overwrite {{{

        " Yank from the cursor to the end of the line, to be consistent with C and D.
        nnoremap Y y$

        " save my pinky
        nnoremap fa zA
        nnoremap F za

        " fix stupid SHIFTs
        command! -bang -nargs=* -complete=file E e<bang> <args>
        command! -bang -nargs=* -complete=file W w<bang> <args>
        command! -bang -nargs=* -complete=file Wq wq<bang> <args>
        command! -bang -nargs=* -complete=file WQ wq<bang> <args>
        command! -bang Wa wa<bang>
        command! -bang WA wa<bang>
        command! -bang Q q<bang>
        command! -bang QA qa<bang>
        command! -bang Qa qa<bang>

        nmap J j
        vmap J j
        nmap K k
        vmap K k
        nmap L l
        vmap L l
        nmap H h
        vmap H h

        " Swaps
        nnoremap k gk
        nnoremap j gj
        nnoremap gk k
        nnoremap gj j

        " Disabled
        nnoremap Q    q
        nnoremap q:   <NOP>
        " no help page
        nnoremap <F1> <NOP>
        inoremap <F1> <NOP>
    " }}}
" }}}
" Utils {{{
    " Toggle background color
    command! BG :let &background = (&background == "dark" ? "light" : "dark")
    " Indentation
    command! Indent2 :set ts=2 sts=2 sw=2
    command! Indent4 :set ts=4 sts=4 sw=4
    command! Indent2to4 :set ts=2 sts=2 sw=2 noet | retab! | set ts=4 sts=4 sw=4 et | retab
    command! Indent4to2 :set ts=4 sts=4 sw=4 noet | retab! | set ts=2 sts=2 sw=2 et | retab
    " Trailing Spaces
    command! Trim :%s:\s\+$::g
    " External editor
    command! Subl exe ':silent !subl %'
    command! Code exe ':silent !code %'
" }}}
" Autocmd {{{
    augroup filetype_change " {{{
        au!
        au BufNewFile,BufRead *.markdown,*.md setlocal filetype=markdown
        au BufNewFile,BufRead *.html setlocal filetype=htmlm4 " show js syntax on html
    augroup end " }}}
" }}}
" Custom Plugins {{{
    " focus pane {{{
        function! FocusModeToggle()
            " this doesn't work on large screen, but why if you get a big
            " enough screen to code
            if winheight(0) > 35 && winwidth(0) > 150
                :winc=
            else
                :999winc+ | 999winc>
            endif
        endfunction

        command! Focus call FocusModeToggle()
        nnoremap Æ’ :call FocusModeToggle()<cr>
    " }}}
    " ruler {{{
        set colorcolumn=0
        let s:color_column_old = 80
        function! s:ToggleColorColumn()
            if s:color_column_old == 0
                let s:color_column_old = &colorcolumn
                windo let &colorcolumn = 0
            else
                windo let &colorcolumn=s:color_column_old
                let s:color_column_old = 0
            endif
        endfunction

        command! Ruler call <SID>ToggleColorColumn()
    " }}}
    " wipebuffer {{{
        function! DeleteInactiveBufs()
            "From tabpagebuflist() help, get a list of all buffers in all tabs
            let tablist = []
            for i in range(tabpagenr('$'))
                call extend(tablist, tabpagebuflist(i + 1))
            endfor

            let nWipeouts = 0
            for i in range(1, bufnr('$'))
                if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
                    "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
                    silent exec 'bwipeout' i
                    let nWipeouts = nWipeouts + 1
                endif
            endfor
            echomsg nWipeouts . ' buffer(s) wiped out'
        endfunction
        command! WipeBuffer call DeleteInactiveBufs()
    " }}}
" }}}
" Plugins {{{
    call plug#begin('~/.vim/bundle')
    Plug '~/dotfiles/vim/custom_bundle'
    " GUI {{{
        Plug 'mhinz/vim-startify'
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        " Plug 'ap/vim-css-color' " # show colors for css values
        Plug 'Yggdroot/indentLine'
        Plug 'airblade/vim-gitgutter'
        Plug 'sheerun/vim-polyglot' " # syntax highlighting for a lot of filetypes
        " # themes
        Plug 'rakr/vim-one'
        " Plug 'NLKNguyen/papercolor-theme'
        " Plug 'lifepillar/vim-solarized8'
        " Plug 'morhetz/gruvbox'
        " Plug 'bluz71/vim-moonfly-colors'
        Plug 'bluz71/vim-nightfly-guicolors'
    " }}}
    " Utility {{{
        Plug 'christoomey/vim-system-copy'
        Plug 'godlygeek/tabular' | Plug 'plasticboy/vim-markdown'
        Plug 'tpope/vim-unimpaired'
        Plug 'tpope/vim-fugitive' " git utilities wrapper
        Plug 'metakirby5/codi.vim' " show code result inline when run :Codi
        Plug 'tmilloff/vim-address-bar'
        Plug 'nfvs/vim-perforce'
        " Plug 'ngemily/vim-vp4'
    " }}}
    " File Nav {{{
        Plug 'tpope/vim-vinegar' " make vim's netwr file browser easy to use
        Plug 'scrooloose/nerdtree' " side bar file browser
        " Plug 'jistr/vim-nerdtree-tabs'
        Plug 'Xuyuanp/nerdtree-git-plugin'
    " }}}
    " Edit {{{
        " Plug 'Konfekt/FastFold'
        " Plug 'Konfekt/FoldText'
        Plug 'pseewald/vim-anyfold'

        Plug 'AndrewRadev/splitjoin.vim' " convert between multiline code and one liner
        Plug 'tpope/vim-repeat' " make many commands repeatable with .
        Plug 'gcmt/wildfire.vim' " select textobject based on scope
        Plug 'tpope/vim-surround'
        Plug 'tomtom/tcomment_vim'
        Plug 'vim-scripts/SearchComplete'

        " Plug 'jiangmiao/auto-pairs' " auto insert (){}[]``````
        Plug 'cohama/lexima.vim'
        " Plug 'rstacruz/vim-closer' " auto insert (){}[]``````
        Plug 'tpope/vim-endwise' " auto insert endif, done, etc
        Plug 'alvan/vim-closetag' " auto close html tags

        Plug 'vim-scripts/marvim'

        if g:useIntellisense == 1
            Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
            Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}
            Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
            Plug 'neoclide/coc-prettier', {'do': 'yarn install --frozen-lockfile'}
            Plug 'neoclide/coc-eslint', {'do': 'yarn install --frozen-lockfile'}
            Plug 'neoclide/coc-tslint', {'do': 'yarn install --frozen-lockfile'}
            Plug 'neoclide/coc-css', {'do': 'yarn install --frozen-lockfile'}
            Plug 'neoclide/coc-lists', {'do': 'yarn install --frozen-lockfile'} " mru and stuff
            Plug 'neoclide/coc-highlight', {'do': 'yarn install --frozen-lockfile'} " color highlighting
        else
            Plug 'ajh17/VimCompletesMe' " this also works with tern
        endif

        " async syntax check
        " Plug 'w0rp/ale'
    " }}}
    " Search & Replace/Movement {{{
        Plug 'tpope/vim-abolish' " better abbreviation and substitution expression
        Plug 'terryma/vim-multiple-cursors'

        Plug 'MattesGroeger/vim-bookmarks'
        Plug 'Lokaltog/vim-easymotion'

        " sublime-like fuzzy search in files
        " <leader>ff to search, during search:
        " - <c-o><c-r> toggle regex
        " - <c-o><c-s> toggle case-sensitivity
        " - <c-o><c-w> toggle whole word search
        " :%ESubstitute/from/to/gc to replace in search results
        Plug 'eugen0329/vim-esearch'

        if g:fuzzyFinder == 1
            " Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
            Plug '/usr/local/opt/fzf'
            Plug 'junegunn/fzf.vim'
        elseif g:fuzzyFinder == 2
            Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
        else
            Plug 'kien/ctrlp.vim'
            Plug 'tacahiroy/ctrlp-funky'
        endif
    " }}}
    " Web Development {{{
        Plug 'othree/yajs.vim'
        Plug 'othree/es.next.syntax.vim'
        Plug 'mattn/emmet-vim'
        Plug 'maksimr/vim-jsbeautify'
        " Plug 'ternjs/tern_for_vim', { 'dir': '~/.vim/bundle/tern_for_vim', 'do': 'npm install tern' }
    " }}}
    call plug#end()

    " Settings
    " ------------------------------------------------------------
    " startify {{{
        let g:startify_session_dir='~/.vim/sessions/'
    " }}}
    " lightline {{{
        let g:airline#extensions#tabline#enabled = 1
        let g:airline_powerline_fonts = 1
        let g:airline#extensions#wordcount#enabled = 0
    " }}}
    " NerdTree {{{
        nmap <leader>n :NERDTreeToggle<CR>
        nmap <leader>t :NERDTreeFind<CR>

        let NERDTreeShowBookmarks=0
        let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '^\.class', '^\.o']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=0
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=1
        let NERDTreeKeepTreeInNewTab=1
        let NERDTreeAutoDeleteBuffer=1
        let NERDTreeDirArrows = 1
        let g:nerdtree_tabs_open_on_gui_startup=0
    " }}}
    " indent-line {{{
        let g:indentLine_enabled = 0
        let g:indentLine_faster = 1
        let g:indentLine_color_gui = '#414854'

        command! Indent2 :set ts=2 sts=2 sw=2 | IndentLinesReset
        command! Indent4 :set ts=4 sts=4 sw=4 | IndentLinesReset
    " }}}
    " GitGutter {{{
        " <leader>hs/r to stage/revert hunk,
        let g:gitgutter_realtime = 0
        let g:gitgutter_eager = 0
        nmap ]h <Plug>GitGutterNextHunk
        nmap [h <Plug>GitGutterPrevHunk
    " }}}
    " Easymotion {{{
        let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
        " bi-directional find motion
        nmap s <Plug>(easymotion-s2)
    " }}}
    " fuzzy file {{{
        if g:fuzzyFinder == 1
            nnoremap <C-p> :FZF<cr>
            nnoremap <C-f> :BLines<cr>
            nnoremap <C-b> :Buffers<cr>

            command! -bang -nargs=* Rg
                \ call fzf#vim#grep(
                \   'rg --column --line-number --follow --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
                \   <bang>0 ? fzf#vim#with_preview('up:60%')
                \           : fzf#vim#with_preview('right:50%:hidden', '?'),
                \   <bang>0)
        elseif g:fuzzyFinder == 2
            nnoremap <C-p> :Clap files<cr>
            nnoremap <C-f> :Clap blines<cr>
            nnoremap <C-b> :Clap buffers<cr>
        else
            let g:ctrlp_use_caching = 0 " no need with fd
            let g:ctrlp_user_command = 'fd --type f --follow --color=never "" %s'

            let g:ctrlp_funky_syntax_highlight = 1
            nnoremap <C-r> :CtrlPFunky<CR>
        endif
    " }}}
    " Multicurosr {{{
        let g:multi_cursor_use_default_mapping=0
        let g:multi_cursor_next_key='<C-d>'
        " let g:multi_cursor_prev_key='<C-f>'
        let g:multi_cursor_skip_key='<C-x>'
        let g:multi_cursor_quit_key='<Esc>'
        let g:multi_cursor_exit_from_visual_mode=0
    " }}}
    " auto close tag {{{
        let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.cmp,*.app,*.xml,*.intf,*.evt"
    " }}}
    " Wildfire {{{
        nmap <leader>w <Plug>(wildfire-fuel)
        let g:wildfire_objects = {
            \ "*" : ["i'", 'i"', "i)", "i]", "i}"]
        \ }

        cal wildfire#triggers#Add("<ENTER>", {
            \ "html,xml,htmlm4" : ["at", "it"],
        \ })
    " }}}
    " emmet {{{
        let g:user_emmet_leader_key='<C-e>'
        let g:user_emmet_install_global = 1
    " }}}
    " javascript {{{
        " allow html css syntax highlighting in javascript
        let javascript_enable_domhtmlcss = 1
        let g:jsx_ext_required = 1

        " ternjs - close preview doc window when completion is done
        " autocmd CompleteDone * pclose
    " }}}
    " markdown {{{
        let g:vim_markdown_folding_disabled = 1
    " }}}
    " jsbeautifyer {{{
        autocmd FileType javascript command! Beautify :call JsBeautify()<cr>
        autocmd FileType json command! Beautify :call JsonBeautify()<cr>
        autocmd FileType jsx command! Beautify :call JsxBeautify()<cr>
        autocmd FileType html command! Beautify :call HtmlBeautify()<cr>
        autocmd FileType css command! Beautify :call CSSBeautify()<cr>
    " }}}
    " Autocomplete {{{
        if g:useIntellisense == 1
            inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
            inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

            inoremap <silent><expr> <c-space> coc#refresh()

            " gd - go to definition of word under cursor
            nmap <silent> gd <Plug>(coc-definition)
            nmap <silent> gy <Plug>(coc-type-definition)

            " gi - go to implementation
            nmap <silent> gi <Plug>(coc-implementation)

            " gr - find references
            nmap <silent> gr <Plug>(coc-references)

            " gh - get hint on whatever's under the cursor
            nnoremap <silent> K :call <SID>show_documentation()<CR>
            nnoremap <silent> gh :call <SID>show_documentation()<CR>

            function! s:show_documentation()
                if &filetype == 'vim'
                    execute 'h '.expand('<cword>')
                else
                    call CocAction('doHover')
                endif
            endfunction


            " Highlight symbol under cursor on CursorHold
            autocmd CursorHold * silent call CocActionAsync('highlight')

            nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
            nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>

            " List errors
            nnoremap <silent> <leader>cl  :<C-u>CocList locationlist<cr>

            " list commands available in tsserver (and others)
            nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>

            " restart when tsserver gets wonky
            nnoremap <silent> <leader>cR  :<C-u>CocRestart<CR>

            " view all errors
            nnoremap <silent> <leader>cl  :<C-u>CocList locationlist<CR>

            " manage extensions
            nnoremap <silent> <leader>cx  :<C-u>CocList extensions<cr>

            " rename the current word in the cursor
            nmap <leader>cr  <Plug>(coc-rename)
            nmap <leader>cf  <Plug>(coc-format-selected)
            vmap <leader>cf  <Plug>(coc-format-selected)

            " run code actions
            vmap <leader>ca  <Plug>(coc-codeaction-selected)
            nmap <leader>ca  <Plug>(coc-codeaction-selected)
        else
            inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
            inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
        endif
    " }}}
    " vim-esearch {{{
        let g:esearch = {
                \ 'adapter':    'rg',
                \ 'backend':    'nvim',
                \ 'out':        'win',
                \ 'batch_size': 1000,
                \ 'use':        ['visual', 'hlsearch', 'last', 'word_under_cursor'],
                \}
        let g:esearch#adapter#rg#options = '--follow --iglob "!target/*"'
    " }}}
    " folding {{{
        " anyfold
        autocmd Filetype * AnyFoldActivate
        let g:anyfold_fold_comments=1

        " fastfold
        " nmap zuz <Plug>(FastFoldUpdate)
        " let g:fastfold_savehook = 1
        " let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
        " let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
        "
        " let g:markdown_folding = 0
        " let g:vimsyn_folding = 'af'
        " let g:xml_syntax_folding = 1
        " let g:javaScript_fold = 1
        " let g:sh_fold_enabled= 7
        " let g:ruby_fold = 1
        "
        " set foldlevel=10
    " }}}
" }}}

syntax enable
