" vim: fdm=marker foldmarker={{{,}}} foldlevel=1

" Settings {{{
    " general {{{
        set nocompatible
        set ff=unix
        set autoread

        set viewoptions=folds,options,cursor,unix,slash " better window/*nix compatibility

        set backspace=indent,eol,start  " Backspace for dummies

        set ttyfast         " faster terminal updates

        set hidden              " Allow buffer switching without saving

        set sessionoptions-=help

        set modeline
        set modelines=5

        " paragraph wrapping
        " set formatoptions+=w
        " set tw=79

        set ttimeoutlen=50 " lower mode switching delay

        " Let Vim use utf-8 internally, because many scripts require this
        set encoding=utf-8
        set fileencodings=utf-8,gbk " add gbk to display Chinese gbk
    " }}}
    " nobackups {{{
        set nobackup
        set nowritebackup
        set noswapfile
    " }}}
    " indent {{{
        set autoindent      " indent automatically
        set shiftwidth=4    " << >> indent width
        set softtabstop=4   " backspace width = 4
        set tabstop=4       " tab width set to 4
        set expandtab       " expand tab into spaces
        " fixes html indenting in vim 7.4
        let g:html_indent_inctags = "html,body,head,tbody"
    " }}}
    " search {{{
        set incsearch       " do incremental searching
        set hlsearch        " highlight search terms
        set ignorecase      " ignore case
        set smartcase       " ignore case if search pattern is all lowercase,
                            "    case-sensitive otherwise
    " }}}
    " wildignore {{{
        set wildignore=*.o,*.pyc,*~,*.class
        set wildignore+=*.jpg,*.png,*.gif,*.pdf,*.tar,*.zip,*.tgz
        set wildignore+=*.tmp
        set wildignore+=.git,.atom,.idea,.settings,.travis
        set wildignore+=node_modules,bower_components,target,project_files,dist
        set wildignore+=.DS_Store
    " }}}
    " UI {{{
        syntax on           " Syntax highlighting

        set shortmess+=I    " disable startup text
        " set relativenumber  " use relativenumber for gutter"
        set mouse=a         " Automatically enable mouse usage
        set mousehide       " hide mouse when typing
        set laststatus=2    " always display status line
        set nu              " show number
        set nocursorline    " do not highlight current line
        set linespace=3     " line spacing in pixel
        set tabpagemax=15   " Only show 15 tabs
        set showmode        " Display the current mode
        set showcmd         " display incomplete commands
        set ruler           " turn on status ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showmatch       " show matching parenthesis
        set virtualedit=onemore " Allow for cursor beyond last character

        set nowrap          " don't wrap text for performance reason

        set scrolljump=5    " Lines to scroll when cursor leaves screen
        set scrolloff=3     " Minimum lines to keep above and below cursor

        set splitbelow      " open split panes to bottom and
        set splitright      " right

        set wildmenu                    " Show list instead of just completing
        set wildmode=list:longest,full  " <Tab> completion, list matches, then longest common part, then all.

        set display+=lastline " no more @'s even when line doesn't fit screen

        set guitablabel=%t    " only display file name on tab title

        set foldnestmax=3

        let g:netrw_liststyle=3 " file tree layout

        set linebreak         " word wrapping
        set showbreak=\ \ "   " add 2 more spaces for indented wrapped lines

        if v:version >= 704
            set breakindent   " keep indent for wrapped lines
        endif

        " set t_Co=256 " use 256 colors
        if has("termguicolors")
            set termguicolors
        endif
    " }}}
    " gvim {{{
        if has("gui_running")
            set guioptions-=m " remove menu bar
            set guioptions-=T " remove toolbar
            set guioptions-=r " remove right scrollbar
            set guioptions-=L " remove left  scrollbar
            set guioptions+=e " use native tab display
        endif
    " }}}
    " paste automatically with paste mode on {{{
        if exists('$TMUX')
            function! WrapForTmux(s)
                let tmux_start = "\<Esc>Ptmux;"
                let tmux_end = "\<Esc>\\"
                return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
            endfunction

            let &t_SI .= WrapForTmux("\<Esc>[?2004h")
            let &t_EI .= WrapForTmux("\<Esc>[?2004l")
        endif

        function! XTermPasteBegin()
            set pastetoggle=<Esc>[201~
            set paste
            return ""
        endfunction

        inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
    " }}}
    " Arrow Key Fix {{{
        " https://github.com/spf13/spf13-vim/issues/780
        if &term[:4] == "xterm" || &term[:5] == 'screen' || &term[:3] == 'rxvt'
            inoremap <silent> <C-[>OC <RIGHT>
        endif
    " }}}
" }}}

" Key Mapping {{{
    " New Bindings {{{
        let g:mapleader = ","

        " Edit/Reload vimrc
        nmap <silent> <leader>ev :e ~/.vimrc<cr>
        nmap <silent> <leader>sv :so ~/.vimrc<cr>

        " highlight same words under cursor when double click on it
        nmap <2-LeftMouse> *

        " replace word under cursor
        nmap <leader>r :%s/\<<C-r><C-w>\>/
        " display all lines with keyword under cursor and ask which one to jump to
        nmap gr [I:let nr = input("Which one: ")<bar>exe "normal " . nr ."[\t"<cr>

        nmap <silent> <leader>/ :nohlsearch<cr>

        map <F2> :tabprevious<cr>
        map <F3> :tabnext<cr>

        map <F5> :let &background = (&background == "dark" ? "light" : "dark")<cr>

        noremap <leader>y "*y
        noremap <leader>p "*p

        set pastetoggle=<F12>
    " }}}
    " Command abbrev {{{
        " For when you forget to sudo.. Really Write the file.
        cmap w!! w !sudo tee % >/dev/null
        " change to current working directory
        cmap cwd lcd %:p:h
        cmap pwdf echo @%
    " }}}
    " Default Replacements/Extension/Overwrite {{{

        " Yank from the cursor to the end of the line, to be consistent with C and D.
        nnoremap Y y$

        " save my pinky
        nnoremap fa zA
        nnoremap F za

        " fix stupid SHIFTs
        command! -bang -nargs=* -complete=file E e<bang> <args>
        command! -bang -nargs=* -complete=file W w<bang> <args>
        command! -bang -nargs=* -complete=file Wq wq<bang> <args>
        command! -bang -nargs=* -complete=file WQ wq<bang> <args>
        command! -bang Wa wa<bang>
        command! -bang WA wa<bang>
        command! -bang Q q<bang>
        command! -bang QA qa<bang>
        command! -bang Qa qa<bang>

        nmap J j
        vmap J j
        nmap K k
        vmap K k
        nmap L l
        vmap L l
        nmap H h
        vmap H h

        " Swaps
        nnoremap k gk
        nnoremap j gj
        nnoremap gk k
        nnoremap gj j

        " Disabled
        nnoremap Q    q
        nnoremap q    <NOP>
        nnoremap q:   <NOP>
        " help page
        nnoremap <F1> <NOP>
        inoremap <F1> <NOP>

        " Start/End
        inoremap <C-e> <End>
        inoremap <C-a> <Home>
    " }}}
" }}}

" Utils {{{
    " Indentation {{{
        command! Indent2 :set ts=2 sts=2 sw=2
        command! Indent4 :set ts=4 sts=4 sw=4
        command! Indent2to4 :set ts=2 sts=2 sw=2 noet | retab! | set ts=4 sts=4 sw=4 et | retab
        command! Indent4to2 :set ts=4 sts=4 sw=4 noet | retab! | set ts=2 sts=2 sw=2 et | retab
    " }}}
    " Resize Window {{{
        command! QuarterScreen :set lines=25 | set columns=85  " quarter screen
        command! HalfScreen    :set lines=50 | set columns=85  " half screen
        command! FullScreen    :set lines=50 | set columns=180 " full screen
        command! TinyScreen    :set lines=20 | set columns=45  " tiny screen
    " }}}
    " Trailing Spaces {{{
        command! Trim :%s:\s\+$::g
    " }}}
    " Wipe Buffer {{{
        function! DeleteInactiveBufs()
            "From tabpagebuflist() help, get a list of all buffers in all tabs
            let tablist = []
            for i in range(tabpagenr('$'))
                call extend(tablist, tabpagebuflist(i + 1))
            endfor

            let nWipeouts = 0
            for i in range(1, bufnr('$'))
                if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
                    "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
                    silent exec 'bwipeout' i
                    let nWipeouts = nWipeouts + 1
                endif
            endfor
            echomsg nWipeouts . ' buffer(s) wiped out'
        endfunction
        command! WipeBuffer call DeleteInactiveBufs()
    " }}}
    " Focus Mode {{{
        function! FocusModeToggle()
            " this doesn't work on large screen, but why if you get a big
            " enough screen to code
            if winheight(0) > 35 && winwidth(0) > 150
                :winc=
            else
                :999winc+ | 999winc>
            endif
        endfunction
        command! Focus call FocusModeToggle()
        nnoremap Æ’ :call FocusModeToggle()<cr>
    " }}}
    " 80 Columns {{{
        set colorcolumn=0
        let s:color_column_old = 80
        function! s:ToggleColorColumn()
            if s:color_column_old == 0
                let s:color_column_old = &colorcolumn
                windo let &colorcolumn = 0
            else
                windo let &colorcolumn=s:color_column_old
                let s:color_column_old = 0
            endif
        endfunction
        nnoremap <silent>,8 :call <SID>ToggleColorColumn()<cr>
    " }}}
    " Abbreviations {{{
        silent iabbrev vimmarker vim: foldmethod=marker foldmarker={,}
    " }}}
" }}}

" Autocmd {{{
    augroup filetype_change " {{{
        au!
        au BufNewFile,BufRead *.markdown,*.md setlocal filetype=markdown
        au BufNewFile,BufRead *.html setlocal filetype=htmlm4 " show js syntax on html
    augroup end " }}}
    " augroup number_toggle "{{{
    "     au!
    "     au BufEnter,FocusGained,InsertLeave * set relativenumber
    "     au BufLeave,FocusLost,InsertEnter   * set norelativenumber
    " augroup end "}}}
" }}}

" Plugins {{{
    " Auto-install plugin manager {{{
        let s:plugInit=0
        if !filereadable(expand('~/.vim/autoload/plug.vim'))
            echo "Installing plugin manager.."
            echo ""
            silent ! curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            let s:plugInit=1
        endif
    " }}}
    " List {{{
        " START {{{
            call plug#begin('~/.vim/bundle')
            Plug '~/dotfiles/vim/custom_bundle'
        " }}}
        " GUI {{{
            Plug 'mhinz/vim-startify'
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'
            " # colorful parentheses
            Plug 'luochen1990/rainbow' " , { 'for': ['js', 'java', 'c', 'cpp'] }
            " # show function on the side
            " Plug 'majutsushi/tagbar', { 'for': ['c', 'cpp', 'java'] }
            " # show colors for css values
            Plug 'gorodinskiy/vim-coloresque'
            " Plug 'nathanaelkane/vim-indent-guides'
            Plug 'Yggdroot/indentLine'
            Plug 'airblade/vim-gitgutter'
            " # syntax highlighting for a lot of filetypes
            Plug 'sheerun/vim-polyglot'
            " # themes
            Plug 'iCyMind/NeoSolarized'
            Plug 'rakr/vim-one'
            Plug 'liuchengxu/space-vim-dark'
        " }}}
        " Utility {{{
            Plug 'christoomey/vim-system-copy'
            Plug 'plasticboy/vim-markdown' | Plug 'godlygeek/tabular'
            Plug 'tpope/vim-unimpaired'
            " git utilities wrapper
            Plug 'tpope/vim-fugitive'
            " show code result inline when run :Codi
            Plug 'metakirby5/codi.vim'
            Plug 'vim-syntastic/syntastic'
        " }}}
        " File Nav {{{
            " make vim's netwr file browser easy to use
            Plug 'tpope/vim-vinegar'
            " side bar file browser
            Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'
        " }}}
        " AutoComplete/Edit {{{
            " convert between multiline code and one liner
            Plug 'AndrewRadev/splitjoin.vim'
            " make many commands repeatable with .
            Plug 'tpope/vim-repeat'
            " select textobject based on scope
            Plug 'gcmt/wildfire.vim'

            Plug 'tpope/vim-surround'
            Plug 'tomtom/tcomment_vim'

            Plug 'vim-scripts/SearchComplete'

            " auto insert (){}[]``````
            Plug 'jiangmiao/auto-pairs'
            " auto insert endif, done, etc
            Plug 'tpope/vim-endwise'
            " auto close html tags
            Plug 'alvan/vim-closetag'

            " if v:version >= 703 && has("lua")
            "     Plug 'Shougo/neocomplete.vim' " requires vim built with lua support
            "     Plug 'Shougo/neosnippet.vim' | Plug 'Shougo/neosnippet-snippets'
            " elseif has('nvim')
                " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
                " let g:deoplete#enable_at_startup = 1
                " Plug 'Shougo/neosnippet.vim' | Plug 'Shougo/neosnippet-snippets'
            " else
                Plug 'ajh17/VimCompletesMe'
            " endif
        " }}}
        " Search & Replace/Movement {{{
            " util for search and replace in multiple files
            " Plug 'brooth/far.vim'
            " better abbreviation and substitution expression
            Plug 'tpope/vim-abolish'
            Plug 'terryma/vim-multiple-cursors'

            Plug 'MattesGroeger/vim-bookmarks'
            Plug 'Lokaltog/vim-easymotion'

            " async searcher
            " Plug 'mhinz/vim-grepper'

            " sublime-like fuzzy search in files
            " <leader>ff to search, during search:
            " - <c-o><c-r> toggle regex
            " - <c-o><c-s> toggle case-sensitivity
            " - <c-o><c-w> toggle whole word search
            " :%ESubstitute/from/to/gc to replace in search results
            Plug 'eugen0329/vim-esearch'

            if !has("gui_running")
                Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
                Plug 'junegunn/fzf.vim'
            endif

            Plug 'ctrlpvim/ctrlp.vim' | Plug 'tacahiroy/ctrlp-funky'
            Plug 'FelikZ/ctrlp-py-matcher'
        " }}}
        " Web Development {{{
            Plug 'mattn/emmet-vim'
            Plug 'maksimr/vim-jsbeautify'
            Plug 'ternjs/tern_for_vim', { 'dir': '~/.vim/bundle/tern_for_vim', 'do': 'npm install tern' }
        " }}}
        " END {{{
            call plug#end()
            if s:plugInit == 1
                :PlugInstall
            endif
        " }}}
    " }}}
    " Settings {{{
        " startify {{{
            let g:startify_session_dir='~/.vim/sessions/'
        " }}}
        " Airline {{{
            let g:airline#extensions#tabline#enabled = 1
            let g:airline#extensions#tabline#fnamemod = ':t'
            let g:airline_section_b='' " hunks, branch
            let g:airline_section_y='%{&ff}' " file format
            let g:airline_section_z='%c' " line/column
            let g:airline_section_c = '%t'

            let g:airline_left_sep=''
            let g:airline_right_sep=''
            let g:airline_left_alt_sep=''
            let g:airline_right_alt_sep=''
            let g:airline#extensions#tabline#left_sep = ''
            let g:airline#extensions#tabline#left_alt_sep = ''
            let g:airline#extensions#tabline#right_sep = ''
            let g:airline#extensions#tabline#right_alt_sep = ''
            let g:airline#extensions#whitespace#trailing_format = '\s\+$[%s]'
            let g:airline#extensions#whitespace#mixed_indent_format = '\t\s[%s]'
            let g:airline#extensions#whitespace#long_format = 'long[%s]'
            let g:airline#extensions#whitespace#mixed_indent_file_format = '\t[%s]'

            let g:airline_theme='base16'
        " }}}
        " rainbow {{{
            let g:rainbow_active = 0
            let g:rainbow_conf = {
                \   'guifgs' : ['royalblue3', 'darkorange3', 'seagreen3', '#ec8f6f'],
                \   'ctermfgs': ['141', '196', '112', '208', '129']
                \}
        " }}}
        " NerdTree {{{
            nmap <leader>n :NERDTreeTabsToggle<CR>
            nmap <leader>t :NERDTreeFind<CR>

            let NERDTreeShowBookmarks=0
            let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '^\.class', '^\.o']
            let NERDTreeChDirMode=0
            let NERDTreeQuitOnOpen=0
            let NERDTreeMouseMode=2
            let NERDTreeShowHidden=1
            let NERDTreeKeepTreeInNewTab=1
            let g:nerdtree_tabs_open_on_gui_startup=0
        " }}}
        " indent-guide {{{
            let g:indent_guides_enable_on_vim_startup = 0
            let g:indent_guides_start_level = 2
            let g:indent_guides_guide_size = 1
            let g:indentLine_char = 'âŽ¸'
            let g:indentLine_color_gui = '#414854'
        " }}}
        " GitGutter {{{
            " <leader>hs/r to stage/revert hunk,
            let g:gitgutter_realtime = 0
            let g:gitgutter_eager = 0
            nmap ]h <Plug>GitGutterNextHunk
            nmap [h <Plug>GitGutterPrevHunk
        " }}}
        " Easymotion {{{
            if v:version >= 703
                let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
                " bi-directional find motion
                nmap s <Plug>(easymotion-s2)
            endif
        " }}}
        " fzf {{{
            nnoremap <C-o> :FZF<cr>
        " }}}
        " CtrlP {{{
            let g:ctrlp_working_path_mode = 'ra'
            let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
            let g:ctrlp_clear_cache_on_exit = 0
            let g:ctrlp_max_files = 0

            " use ag to search, use .agignore to exclude files
            " let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup -g ""'
            nnoremap <C-b> :CtrlPBuffer<cr>

            " CtrlP extensions --------------------
            " funky
            let g:ctrlp_extensions = ['funky']
            let g:ctrlp_funky_syntax_highlight = 1
            let g:ctrlp_funky_use_cache = 1
            nnoremap <C-f> :CtrlPFunky<cr>
            " matching
            let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
        " }}}
        " Multicurosr {{{
            let g:multi_cursor_use_default_mapping=0
            let g:multi_cursor_next_key='<C-d>'
            " let g:multi_cursor_prev_key='<C-f>'
            let g:multi_cursor_skip_key='<C-x>'
            let g:multi_cursor_quit_key='<Esc>'
            let g:multi_cursor_exit_from_visual_mode=0
            " Compatibility setting for Shougo's Neocomplete {{{
            " Called once right before you start selecting multiple cursors
            function! Multiple_cursors_before()
              if exists(':NeoCompleteLock')==2
                exe 'NeoCompleteLock'
              endif
            endfunction
            " Called once only when the multiple selection is canceled (default <Esc>)
            function! Multiple_cursors_after()
              if exists(':NeoCompleteUnlock')==2
                exe 'NeoCompleteUnlock'
              endif
            endfunction
            " }}}
        " }}}
        " auto close tag {{{
            let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.cmp,*.app,*.xml,*.intf,*.evt"
        " }}}
        " snippet {{{
            " let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
            " imap <C-k>     <Plug>(neosnippet_expand_or_jump)
            " smap <C-k>     <Plug>(neosnippet_expand_or_jump)
            " xmap <C-k>     <Plug>(neosnippet_expand_target)

            " SuperTab like snippets behavior.
            " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
            " imap <C-k>     <Plug>(neosnippet_expand_or_jump)
            " imap <expr><TAB>
            " \ pumvisible() ? "\<C-n>" :
            " \ neosnippet#expandable_or_jumpable() ?
            " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
            " smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            " \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
            "
            " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
            " let g:UltiSnipsExpandTrigger="<tab>"
            " let g:UltiSnipsJumpForwardTrigger="<c-k>"
            " let g:UltiSnipsJumpBackwardTrigger="<c-j>"
        " }}}
        " Wildfire {{{
            nmap <leader>w <Plug>(wildfire-fuel)
            let g:wildfire_objects = {
                \ "*" : ["i'", 'i"', "i)", "i]", "i}"]
            \ }

            cal wildfire#triggers#Add("<ENTER>", {
                \ "html,xml" : ["at", "it"],
            \ })
        " }}}
        " shougo neocomplete {{{
            " if v:version >= 703 && has("lua")
            "     " Disable AutoComplPop.
            "     let g:acp_enableAtStartup = 0
            "     let g:neocomplete#enable_at_startup = 1
            "     let g:neocomplete#enable_fuzzy_completion = 1
            "     let g:neocomplete_enable_fuzzy_completion_start_length = 2
            "     let g:neocomplete#enable_smart_case = 1
            "     " Set minimum syntax keyword length.
            "     let g:neocomplete#sources#syntax#min_keyword_length = 3
            "     let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
            "     " key mapping
            "     inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
            "     inoremap <expr><C-Space> pumvisible() ? "\<C-n>" : "\<TAB>"
            "     inoremap <expr><C-u> neocomplete#undo_completion()
            "     inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
            "
            "     if !exists('g:neocomplete#same_filetypes')
            "         let g:neocomplete#same_filetypes = {}
            "     endif
            "     let g:neocomplete#same_filetypes.html  = 'css'
            "     let g:neocomplete#same_filetypes.xhtml = 'html'
            "     let g:neocomplete#same_filetypes.php = 'html'
            "     let g:neocomplete#same_filetypes.c = 'cpp'
            "     let g:neocomplete#same_filetypes.cpp = 'c'
            " endif
        " }}}
        " emmet {{{
            let g:user_emmet_leader_key='<C-e>'
            let g:user_emmet_install_global = 1
        " }}}
        " javascript {{{
            " allow html css syntax highlighting in javascript
            let javascript_enable_domhtmlcss = 1
            let g:jsx_ext_required = 1
        " }}}
        " ternjs {{{
            " close preview doc window when completion is done
            autocmd CompleteDone * pclose
        " }}}
        " syntastic {{{
            let g:syntastic_javascript_checkers = ['eslint']
            let b:syntastic_mode = 'passive'
        " }}}
        " markdown {{{
            let g:vim_markdown_folding_disabled = 1
        " }}}
        " jsbeautifyer {{{
            autocmd FileType javascript command! Beautify :call JsBeautify()<cr>
            autocmd FileType json command! Beautify :call JsonBeautify()<cr>
            autocmd FileType jsx command! Beautify :call JsxBeautify()<cr>
            autocmd FileType html command! Beautify :call HtmlBeautify()<cr>
            autocmd FileType css command! Beautify :call CSSBeautify()<cr>
        " }}}
        " themes {{{
            let g:neosolarized_vertSplitBgTrans = 0
            let g:neosolarized_bold = 1
            let g:neosolarized_underline = 1
            let g:neosolarized_italic = 1
            let g:neosolarized_contrast = "normal" " low, normal, high

            command! ThemeSolarized :colors NeoSolarized <bar> AirlineTheme solarized
            command! ThemeOne :colors one <bar> AirlineTheme one
        " }}}
    " }}}
" }}}

" Custom config {{{
    syntax enable
    set background=dark " default bg should be dark

    " local customizations
    if filereadable(expand("~/dotfiles/_local_/local.vimrc"))
        source ~/dotfiles/_local_/local.vimrc
    endif
" }}}

